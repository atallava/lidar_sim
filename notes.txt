other logic from ref: don't include points too close, speed of vehicle etc.

everywhere in my code, the pose convention is : yzxrpy, and the yaw has to be -ve
for using in a transformation

--------------------------------------------------

mat:

analyze taylor data:

brigthened image by contrast. how it works is a mystery to me.

scatter3 can handle about a max of 1e5 points smoothly. 

vane sim:

there is a simple way of vizing the segments from each pcd, fill in the holes of
one pcd with the segmentation from another

manual segmentation, can use coarse hierarchical clustering output from matlab.

grep todos in code

params:
viz:
segment length in plot
levels in plotting ellipse

sortintersectionflag used by mesh and ellipse, might want to change comments

selection of scan ids to process

metric of comparing point clouds

what is the default value when nothing is returned from laser?
laser scanning pattern

names getting confusing 
scanPts, for the driveby
trainPts, makes sense

maybe instead of making cell blocks inside a long function, write subfunctions.

actually, perm value is opacity.

70% of ellipsoids scan rays hit
75% of tri scan rays hit

segment:

remember that values of params depend on point cloud density, e.g. max dist to
nbrs or min nbrs

segmentation works with subsampled dataset. so will have to transfer labels to
points in full dataset, just do nearest neighbors

--------------------------------------------------

taylor data:

camera ids: clock-hour orientation, 12 is straight ahead

79: 10
80: 12
81: 4
82: 2
83: 8
84: 6

num frames:
38384, 38384, 6242, 6242, 6224, 7989

num velodyne packets: 4624457

--------------------------------------------------

cpp:

vtk:
axes ticks
subfigures
labels
viewpoints
saving figures

just like you have functions written in matlab for matlab processing, you need
to write emacs lisp to do simple operations in emacs

cpp:
hierarchical clustering
pdist2
flann, nearest neighbors
auto( v : y )
std generator
why template only in header
auto
vector to eigen, vector to flann, better than copying
for each, lambdas
can make a bunch of things const &
many members are public

flann has hierarchical clustering also
check perm logic
clustering class
ellipsoid model generator class
cpp slower than matlab, perhaps because copying vectors?
matlab pdist2 very fast compared to for looping cpp
there is a smarter way to line walk instead of checking intersection with all triangles

alglib rbf fit also very slow. for rim stretch ground train, with 1e6 pts, takes
729 s with rbfdist = 1, level = 1, smoothness = 1e-3 10s with radius = 0.1m.

how does matlab manage griddata fast? probably does it only for query points

why is sim from ellipsoids so sparse?

maybe sorted intersection flag should be in a modeling utils

write triangles also shouldn't be attached to a class?

perm, var for meshes debug

sim with alglib ellipsoids in matlab to debug

maybe flann nn should be a class so nchecks and nkdtrees can be set?

flann nn different from pdist2. because inexact?

code comments

metric for comparing point clouds

params:
max pts in a block

flann
alglib
vtk
cgal

boost scope cpu timer
valgrind
ellipsoids kd tree

for each modeling, do a cleanup: remove pts that are far from any neighbors

segmentation optim: debug the nn calculation, smoothing, look at block 1 in
matlab to see what is going in, plot the spherical variation directly.
maybe block 1 doesn't have enough point density.

in cpp, one function after another, only operating on member data, who knows
what comes when?

abstract modeler class

--------------------------------------------------

while installing cloudcompare:

* installed qt5.7 via instructions from 
  https://wiki.qt.io/Install_Qt_5_on_Ubuntu
eventually files in ~ instead of /usr/local

* git cloned cloudcompare and followed instructions on BUILD.md

* used cmake gui to configure and generate. make of cloudcompare was not finding
  qt5.7

* changed qt default
http://askubuntu.com/questions/435564/qt5-installation-and-path-configuration

* this made it seem like 5.7 was being used, but compile still failed.

* in cmake gui, changed the qt root path + qt cmake refs to the directories in ~
which worked

other logic from ref: don't include points too close, speed of vehicle etc.

everywhere in my code, the pose convention is : yzxrpy, and the yaw has to be -ve
for using in a transformation

--------------------------------------------------

mat:

* brigthened image by contrast. how it works is a mystery to me.

* scatter3 can handle about a max of 1e5 points smoothly. 

* there is a simple way of vizing the segments from each pcd, fill in the holes
of one pcd with the segmentation from another

* manual segmentation, can use coarse hierarchical clustering output from
  matlab.

* grep todos in code

* params:
viz:
segment length in plot
levels in plotting ellipse

* sortintersectionflag used by mesh and ellipse, might want to change comments

* metric of comparing point clouds

* what is the default value when nothing is returned from laser? and laser scanning pattern

* names getting confusing 
scanPts, for the driveby
trainPts, makes sense

* maybe instead of making cell blocks inside a long function, write subfunctions.

* actually, perm value is opacity.

70% of ellipsoids scan rays hit
75% of tri scan rays hit

* remember that values of segmentationparams depend on point cloud density,
e.g. max dist to nbrs or min nbrs. segmentation works with subsampled
dataset. so will have to transfer labels to points in full dataset, just do
nearest neighbors

* figs:
saving fig with 16000 3d points seems like reasonable capacity, takes about 25s. 
remember that each ellipsoid is specified with a number of points. scale number of points based on size?

* labeling

the tape is broken

* in what format do you want labeling results to be in finally?

one file, contains labelings, semgentIds. combine this with the segment pts

--------------------------------------------------

taylor data:

camera ids: clock-hour orientation, 12 is straight ahead

79: 10
80: 12
81: 4
82: 2
83: 8
84: 6

num frames:
38384, 38384, 6242, 6242, 6224, 7989

num velodyne packets: 4624457

--------------------------------------------------

cpp:

* vtk:
axes ticks
subfigures
labels
viewpoints
saving figures

why does viz ellipsoids need one at the origin?

* just like you have functions written in matlab for matlab processing, you need
to write emacs lisp to do simple operations in emacs

* other implementations of hierarchical clustering. flann has one.

* your version of pdist2

* better implementation of vector to eigen, vector to flann, etc, than your
copying code

* there is a smarter way to line walk instead of checking intersection with all
  triangles

* alglib rbf fit also very slow. for rim stretch ground train, with 1e6 pts,
takes 729 s with rbfdist = 1, level = 1, smoothness = 1e-3 10s with radius =
0.1m.

* how does matlab manage griddata fast? probably does it only for query
  points. matlab pdist2 very fast compared to for looping cpp

* write triangles also shouldn't be attached to a class?

* maybe flann nn should be a class so nchecks and nkdtrees can be set?  haven't
found need for this yet.

* write good code comments

* different params

block logic:
dt for nodes

flann
alglib
vtk
cgal

* tools for slow code
boost scope cpu timer
valgrind

* ellipsoids kd tree, if simming is very slow from the entire model. this can
take very long to implement.

* in cpp, one function after another, only operating on member data, who knows
what comes when?

* abstract modeler class?

* vtk bulbs when giving it only sim points, why?

* many class members are public. so there was an error in the rng in
eigenmvn. watch out, there could be similar errors in the rest of the code

* flann includes pt as its own nearest nbr, check code for this!

* one of the sources of error is that the imu posn is not the laser posn!

* how to save objects? boost serialize

* saw error due to playing around too much with private variables. m_n_clusters
error happened. what is a good way to avoid that error.

* i want to throw away visualizer.cpp and pcl includes in cmakelists, but for
unidentified reason, just commenting out visualizer breaks compilation in ways
related to vtk and boost.

* deterministic simulation is useful for debugging. 

useful therefore to know sources of randomness in sim. 

triangles: sample hit id, add gaussian noise to range

ellipsoid: sample hit id, draw from ellipsoid mvn

* the block of taking a real section, laser posn, real pts, ray dirns, etc,
  should that be its own function?

* note that all the sims being compared should use the same tranining data

  this means that the nbr sim uses the same training section pts as hg sim

* cpp pretty printing

--------------------------------------------------

catkin ws:

* how to cleanly include liblidar_sim? with all its dependent libraries?

* for boost regex, had to manually link .a library

--------------------------------------------------

while installing cloudcompare:

* installed qt5.7 via instructions from 
  https://wiki.qt.io/Install_Qt_5_on_Ubuntu
eventually files in ~ instead of /usr/local

* git cloned cloudcompare and followed instructions on BUILD.md

* used cmake gui to configure and generate. make of cloudcompare was not finding
  qt5.7

* changed qt default
http://askubuntu.com/questions/435564/qt5-installation-and-path-configuration

* this made it seem like 5.7 was being used, but compile still failed.

* in cmake gui, changed the qt root path + qt cmake refs to the directories in ~
which worked

--------------------------------------------------

ros install:

* installing indigo. when installing desktop-full, had problems with installing
  the simulators. a gazebo bug is noted on the website. i deleted all gazebo-7
  filed i had, yet didn't go away. installing only desktop for now, since i
  mainly need rviz.

--------------------------------------------------

rviz:

source does not see package
copy of launch does not launch
why is launch exec still open
viz triangles
keep reading parameter server
write to param server using py script


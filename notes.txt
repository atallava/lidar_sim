other logic from ref: don't include points too close, speed of vehicle etc.

everywhere in my code, the pose convention is : yzxrpy, and the yaw has to be -
for using in a transformation

still need to get permeabilities. need cpp code to make that good.

--------------------------------------------------

mat:

analyze taylor data:

brigthened image by contrast. how it works is a mystery to me.

scatter3 can handle about 1e5 points smoothly. keep matlab vegetation points at
max

vane sim:

there is a simple way of vizing the segments from each pcd, fill in the holes of
one pcd with the segmentation from another

manual segmentation, use coarse segmentation output from matlab.

grep todos in code

params:
viz:
segment length in plot
levels in plotting ellipse

surf:
resn in fit
padding
smoothness
dist to projn for restrict fit
maxdist to triangle to consider hit, for calculating variance

for perm:
selection of scan ids to process. some smearing from nearest neighbour matches?

metric of comparing point clouds

what is the default value when nothing is returned from laser?
laser scanning pattern

names getting confusing 
scanPts, for the driveby
trainPts, makes sense

triangulation requires some work of calculating isosurfaces, followed by
marching cubes. if only doing surface calculation for ground, then probably
enough to manually specify triangles.

also shouldn't keep around triangles outside the projection of the ground.

xnodes, ynodes (rev)
zfit
unroll
project observations to 2d, and throw away far points
for rest, perform delaunay
save results

calculate variance

pose simulation

poses simulation

compare real and sim

put both kinds of models together. actually it's not much. just simulate with
first set of models, then second. for any ray with multiple returns, keep the
closest range reading.

done.

maybe instead of making cell braces inside a long function, write subfunctions.

debug ground perm calc

actually, perm value is opacity.

70% of ellipsoids scan rays hit
75% of tri scan rays hit

for now, ignoring the perm of triangles?
although very easy to incorporate

--------------------------------------------------

taylor data:

camera ids: clock-hour orientation, 12 is straight ahead

79: 10
80: 12
81: 4
82: 2
83: 8
84: 6

num frames:
38384, 38384, 6242, 6242, 6224, 7989

num velodyne packets: 4624457

--------------------------------------------------

cpp:

make big matrix of points and then transform?

raii

--------------------------------------------------

while installing cloudcompare:

* installed qt5.7 via instructions from 
  https://wiki.qt.io/Install_Qt_5_on_Ubuntu
eventually files in ~ instead of /usr/local

* git cloned cloudcompare and followed instructions on BUILD.md

* used cmake gui to configure and generate. make of cloudcompare was not finding
  qt5.7

* changed qt default
http://askubuntu.com/questions/435564/qt5-installation-and-path-configuration

* this made it seem like 5.7 was being used, but compile still failed.

* in cmake gui, changed the qt root path + qt cmake refs to the directories in ~
which worked

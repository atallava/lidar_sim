* board


--------------------------------------------------

* mat

- grep todos in code

- maybe instead of making cell blocks inside a long function, write subfunctions.

- primitives pipeline
  - create a version folder in the appropriate section dir
  - make primitive directories
    - also for figures
  - construct primitives
  - generate figures of primitives
    - also not a bad idea to calculate primitive stats

- new scene sim pipeline
  - specify element ids to sample from
    - opportunity to weed out bad primitives
  - create ellipsoid blocks
  - todo
    - create corresponding hg version dir in cpp
    - move block info non ground to hg version, not blocks info
    - script to copy ground triangles, which are retained

- start including short descriptions for each script

------------------------------

* analyze taylor data

- camera ids: clock-hour orientation, 12 is straight ahead

79: 10
80: 12
81: 4
82: 2
83: 8
84: 6

- num frames:
38384, 38384, 6242, 6242, 6224, 7989

- num velodyne packets: 4624457

- brigthened image by contrast. how it works is a mystery to me.

- scatter3 can handle about a max of 1e5 points smoothly. 

- section number-name mapping
1: loop A
2: loop A
3: rim stretch
4: loop B
5: loop B
6: loop C
7: loop C
8: rim stretch
9: loop D
10: loop D
11: loop C'
12: rim stretch
13: loop A
14: loop A

- time extents
  - section 3: [1403045836 1403045903]
  - section 4: [1403045920 1403046033]

------------------------------

* hybrid geometric sim

- sortintersectionflag used by mesh and ellipse, might want to change comments

- remember that values of segmentationparams depend on point cloud density,
e.g. max dist to nbrs or min nbrs. segmentation works with subsampled
dataset. so will have to transfer labels to points in full dataset, just do
nearest neighbors

------------------------------

* scenes labeling

- labeling

the tape is broken

- in what format do you want labeling results to be in finally?

one file, contains labelings, semgentIds. combine this with the segment pts

--------------------------------------------------

* cpp:

- grep todos

- just like you have functions written in matlab for matlab processing, you need
to write emacs lisp to do simple operations in emacs

- better implementation of vector to eigen, vector to flann, etc, than your
copying code

- write good code comments

- tools for slow code
boost scope cpu timer
valgrind

- in a class, one function after another, only operating on member data, who knows
what comes when?

- ray nn

major overhaul. affects hit prob calc etc

- one of the sources of error is that the imu posn is not the laser posn!

- how to save objects? boost serialize

- i want to throw away visualizer.cpp and pcl includes in cmakelists, but for
unidentified reason, just commenting out visualizer breaks compilation in ways
related to vtk and boost.

- cpp pretty printing

- nomenclature for model etc is completely lost and mixed up

- sim versions

ideally for each version file, write the parameters. maybe have each class
return its parameters values as a string. and then some top level thing gathers
them and writes them out? so that you don't have to keep track of them.

- times
  - hg sim 1750 packets takes 3hr
  - mm sim 1750 packets takes 8hr
  - build_models_non_ground_blocks version_310817 took 1hr
  - hg_sim section 8 takes 1.5hr
  - clustering s3 b10, 30k points. both flann and alglib take 2min.
  - with secn3 subsampled, packet step 10, creating sim detail template takes 8min.

- a config helper
  - i guess ideally, a class like OptimAssistant, doesn't deal so extensively
    with parameters. they are instead read from a config file. and there are
    scripting tools to manage the config file. for example, go into python and
    tweak values there. since the python script has the semantic knowledge also
    of what is what, it will have no trouble outputing it as xml, txt, etc etc.

------------------------------

* analyze taylor data:

- other logic from ref: don't include points too close, speed of vehicle etc.

- everywhere in my code, the pose convention is : yzxrpy, and the yaw has to be
-ve for using in a transformation

------------------------------

* vtk

- add features
axes ticks
subfigures
labels
viewpoints
saving figures

- why does viz ellipsoids need one at the origin?

- vtk bulbs when giving it only sim points, why?

------------------------------

* hybrid geometric sim:

- implementations of hierarchical clustering other than alglib. flann has one.

- for intersection with triangles, there is a smarter way to line walk instead
  of checking with all triangles

- alglib rbf fit slow. 

for rim stretch ground train, with 1e6 pts, takes 729 s with rbfdist = 1, level
= 1, smoothness = 1e-3 10s with radius = 0.1m.

- how does matlab manage griddata fast? probably does it only for query
  points. matlab pdist2 very fast compared to for looping cpp

- many class members are public. so there was an error in the rng in
eigenmvn. watch out, there could be similar errors in the rest of the code

- flann includes pt as its own nearest nbr

- saw error due to playing around too much with private variables. m_n_clusters
error happened. what is a good way to avoid that error.

- deterministic simulation is useful for debugging. 

where is randomnness in sim?

triangles: sample hit id, add gaussian noise to range

ellipsoid: sample hit id, draw from ellipsoid mvn

- note that all the sims being compared should use the same tranining data

  this means that the nbr sim uses the same training section pts as hg sim

- flann nn dists are distance squared

--------------------------------------------------

* cloudcompare installation

- installed qt5.7 via instructions from 
  https://wiki.qt.io/Install_Qt_5_on_Ubuntu
eventually files in ~ instead of /usr/local

- git cloned cloudcompare and followed instructions on BUILD.md

- used cmake gui to configure and generate. make of cloudcompare was not finding
  qt5.7

- changed qt default
http://askubuntu.com/questions/435564/qt5-installation-and-path-configuration

- this made it seem like 5.7 was being used, but compile still failed.

- in cmake gui, changed the qt root path + qt cmake refs to the directories in ~
which worked

--------------------------------------------------

* ros install:

- installing indigo. when installing desktop-full, had problems with installing
  the simulators. a gazebo bug is noted on the website. i deleted all gazebo-7
  filed i had, yet didn't go away. installing only desktop for now, since i
  mainly need rviz.

--------------------------------------------------




